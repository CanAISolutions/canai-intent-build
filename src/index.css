
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Import CanAI Modular Styles */
@import './styles/themes.css';
@import './styles/components.css';
@import './styles/animations.css';
@import './styles/utilities.css';

/* Base Body Styles */
@layer base {
  body {
    font-family: var(--font-family-primary);
    background-color: rgb(var(--canai-deep-background));
    color: rgb(var(--canai-light-text));
    min-height: 100vh;
  }
}

/* Purchase Flow Specific Styles */
@layer components {
  /* Processing spinner enhancement */
  .animate-spin {
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
}

/* Purchase Flow Utilities */
@layer utilities {
  .btn-canai, .canai-btn-glow {
    font-family: var(--font-family-primary);
    font-weight: 600;
    font-size: 1.13rem;
    padding: 1.25rem 2.25rem;
    border-radius: 14px;
  }
}

/* API Integration Comments */
/*
  TODO: Supabase session_logs schema mapping:
  
  CREATE TABLE session_logs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES auth.users(id),
    stripe_payment_id TEXT UNIQUE,
    interaction_type TEXT,
    interaction_details JSONB,
    created_at TIMESTAMPTZ DEFAULT now()
  );
  
  Example interaction_details for purchase:
  {
    "product": "business_builder",
    "price": 99,
    "timestamp": "2024-01-01T12:00:00Z",
    "payment_method": "stripe",
    "success": true
  }
*/

/*
  TODO: PostHog Event Mapping:
  
  - funnel_step: { step: 'purchase_page_viewed' | 'product_selected' | 'checkout_initiated' | 'purchase_completed' }
  - price_viewed: { product: string, price: number }
  - product_switched: { from_product: string, to_product: string, price: number }
  - purchase_completed: { product: string, price: number, payment_method: 'stripe' }
  - refund_policy_viewed: {}
*/

/*
  TODO: API Endpoints:
  
  POST /v1/stripe-session
  Request: { product: string, price: number }
  Response: { checkout_url: string, session_id: string }
  
  POST /v1/refund
  Request: { payment_id: string, reason?: string }
  Response: { success: boolean, refund_id: string }
  
  POST /v1/switch-product
  Request: { from_product: string, to_product: string }
  Response: { success: boolean }
*/

/*
  TODO: Jest Tests (F4-tests):
  
  - Product selection flow
  - Checkout modal functionality
  - Stripe session creation simulation
  - Retry logic with exponential backoff
  - Confirmation page rendering
  - PostHog event tracking
  - API error handling
*/

/*
  TODO: Supabase spark_logs schema implementation:
  
  CREATE TABLE spark_logs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    initial_prompt_id UUID REFERENCES initial_prompt_logs(id),
    selected_spark JSONB NOT NULL,
    product_track TEXT CHECK (product_track IN ('business_builder', 'social_email', 'site_audit')),
    feedback TEXT,
    attempt_count INTEGER DEFAULT 1,
    trust_score NUMERIC,
    created_at TIMESTAMPTZ DEFAULT now()
  );
  
  Example selected_spark JSONB:
  {
    "id": "community_spark",
    "title": "BUSINESS_BUILDER: The Community Spark", 
    "tagline": "Unite Denver families with a cozy bakery experience",
    "productTrack": "business_builder"
  }
*/

/*
  TODO: PostHog Event Mapping for Spark Layer:
  
  - spark_selected: { spark_id: string, product: string, selection_time: number }
  - sparks_regenerated: { attempt_count: number, trust_score: number }
  - sparks_regenerated_extra: { attempt_count: number, trust_score: number }
  - funnel_step: { step: 'spark_layer_viewed' | 'spark_selected' | 'regeneration_used' }
*/

/*
  TODO: API Endpoints for Spark Layer:
  
  POST /v1/generate-sparks
  Request: { 
    businessType: string, 
    tone: string, 
    outcome: string,
    attempt_count?: number 
  }
  Response: { 
    sparks: [{ title: string, tagline: string, id: string }], 
    error: null 
  }
  
  POST /v1/regenerate-sparks  
  Request: { 
    businessType: string, 
    tone: string, 
    outcome: string, 
    attempt_count: number,
    feedback?: string 
  }
  Response: { 
    sparks: [{ title: string, tagline: string, id: string }], 
    error: null 
  }
*/

/*
  TODO: Jest Tests for Spark Layer (F3-tests):
  
  - Spark generation and rendering (<1.5s)
  - Card selection and purchase navigation
  - Regeneration with attempt limits (3/4 based on trust score)
  - Feedback collection and submission
  - LocalStorage fallback on API failure
  - PostHog event tracking validation
  - Edge toggle functionality
*/
