
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { toast } from "@/components/ui/sonner";
import { Star } from "lucide-react";
import posthog from "posthog-js";

// Star rating select component
const StarRating = ({
  rating,
  setRating,
  id = "rating-input",
}: {
  rating: number;
  setRating: (n: number) => void;
  id?: string;
}) => (
  <div id={id} className="flex items-center gap-1">
    {[1, 2, 3, 4, 5].map((star) => (
      <button
        type="button"
        key={star}
        onClick={() => setRating(star)}
        className={`p-1 rounded focus-visible:ring-2 ${star <= rating ? "text-yellow-400" : "text-gray-400"}`}
        aria-label={`${star} Star`}
        tabIndex={0}
      >
        <Star fill={star <= rating ? "#FACC15" : "none"} className="w-6 h-6" />
      </button>
    ))}
  </div>
);

// Share/refer button
const ShareButton = ({
  icon,
  label,
  id,
  onClick,
}: {
  icon: React.ReactNode;
  label: string;
  id: string;
  onClick: () => void;
}) => (
  <Button
    variant="canai"
    className="px-3 py-2 flex items-center gap-2"
    id={id}
    type="button"
    onClick={onClick}
    aria-label={label}
  >
    {icon} <span>{label}</span>
  </Button>
);

const FeedbackPage: React.FC = () => {
  const navigate = useNavigate();
  const [rating, setRating] = useState(0);
  const [comment, setComment] = useState("");
  const [email, setEmail] = useState("");
  const [referModalOpen, setReferModalOpen] = useState(false);

  // Simulate prompt_id passed in query or context
  const prompt_id = "SPRINKLE_PROMPT_ID"; // TODO: get real one from context

  // Effects: PostHog page view
  React.useEffect(() => {
    posthog.capture("feedback_page_view", { prompt_id });
  }, []);

  // Handle feedback submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    // FIRE PostHog event
    posthog.capture("feedback_form_submit", { prompt_id, rating, comment });

    // Minimal sentiment (very naive, replace with real):
    const sentiment = rating >= 4
      ? "positive"
      : rating === 3
      ? "neutral"
      : "negative";

    try {
      const res = await fetch("/v1/feedback", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt_id, rating, comment, sentiment }),
      });
      if (!res.ok) throw new Error("Submission failed");

      // Log to feedback_logs
      // (On the real app, supabase triggers/logs this; here is frontend context)
      toast({ title: "Thank you!", description: "Feedback received." });

      // Log to error_logs if poor
      if (rating < 3) {
        posthog.capture("poor_rating", { rating, prompt_id });
        await fetch("/v1/log-error", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            error_type: "low_confidence",
            prompt_id,
            comment,
          }),
        });
      }

      // Schedule follow-up via Make.com (simulate success)
      // In real: call Make.com webhook here for automation
      posthog.capture("followup_scheduled", {
        prompt_id,
        date: "2025-06-22T10:26:00-06:00",
        rating,
      });
    } catch (err) {
      toast({ title: "Error", description: "Could not send feedback.", variant: "destructive" });
    }
  };

  // Handle referral
  const handleRefer = async (e: React.FormEvent) => {
    e.preventDefault();
    // Simulate unique refer link (should be generated by the backend)
    const uniqueLink = `${window.location.origin}/refer?email=${encodeURIComponent(email)}&ref=${Math.random().toString(36).slice(2)}`;
    // Log to session_logs
    await fetch("/v1/log-session", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ email, referred_by_prompt: prompt_id }),
    });
    posthog.capture("refer_submitted", { email });
    toast({ title: "Referral Created", description: `Your unique link: ${uniqueLink}` });
    setEmail("");
    setReferModalOpen(false);
  };

  // Edge: RLS data purge (user request). Only shows if user clicks a reveal button ("Purge my data")
  const [showPurge, setShowPurge] = useState(false);
  const handlePurge = async () => {
    // Delete from feedback_logs and session_logs
    await fetch("/v1/rls-purge", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ prompt_id }),
    });
    posthog.capture("rls_data_purged", { prompt_id });
    toast({ title: "Your data was purged.", description: "Per your request, your feedback and session data have been deleted." });
  };

  // Social share handlers
  const handleShare = (platform: "instagram" | "facebook") => {
    let url = "";
    const shareTxt = encodeURIComponent("Check out how Sprinkle Haven Bakery uses CanAI!");

    if (platform === "instagram")
      url = `https://www.instagram.com/?url=${window.location.origin}&text=${shareTxt}`;
    else if (platform === "facebook")
      url = `https://www.facebook.com/sharer/sharer.php?u=${window.location.origin}&quote=${shareTxt}`;

    posthog.capture("social_share_clicked", { platform });
    window.open(url, "_blank");
  };

  // Open refer modal
  const openRefer = () => {
    posthog.capture("refer_btn_clicked", { prompt_id });
    setReferModalOpen(true);
  };

  // QuickBooks link (replace with real URL as needed)
  const quickbooksLink = "https://quickbooks.intuit.com/";

  // Followup/upsell block, only viewed on submit (for demo).
  const [showFollowup, setShowFollowup] = useState(false);

  return (
    <main className="max-w-lg mx-auto mt-10 p-6 rounded-xl bg-gradient-to-br from-[#1a2740] to-[#28578b71] shadow-lg flex flex-col gap-6" aria-label="Sprinkle Haven Bakery Feedback">
      <h1 className="font-playfair text-3xl text-canai-cyan mb-2">Share Your Experience</h1>
      <form id="feedback-form" onSubmit={e => { handleSubmit(e); setShowFollowup(true); }} className="flex flex-col gap-4 bg-[#18304fdd] rounded-lg p-5 shadow">
        <label htmlFor="rating-input" className="font-semibold text-sm text-canai-cyan">How was your SparkSplit experience?</label>
        <StarRating rating={rating} setRating={setRating} />
        <label htmlFor="comment-input" className="font-semibold text-sm text-canai-cyan mt-2">Leave a comment</label>
        <Textarea
          id="comment-input"
          placeholder="What did you think of the business plan comparison? Suggestions welcome!"
          value={comment}
          onChange={e => setComment(e.target.value)}
          className="bg-[#13395799] border-canai-primary text-canai-light"
          required
          minLength={5}
          maxLength={200}
        />
        <div id="feedback-note" className="text-xs text-canai-light-softer mt-2 mb-1">
          * Your honest feedback helps other founders and shapes the CanAI platform.<br />
          Need your invoice? <a id="quickbooks-link" href={quickbooksLink} target="_blank" rel="noopener noreferrer" className="underline text-canai-cyan">Get it from QuickBooks</a>
        </div>
        <div className="flex gap-3 items-center">
          <ShareButton
            icon={<span className="text-lg" aria-label="Instagram">📸</span>}
            label="Instagram"
            id="share-btn-instagram"
            onClick={() => handleShare("instagram")}
          />
          <ShareButton
            icon={<span className="text-lg" aria-label="Facebook">📘</span>}
            label="Facebook"
            id="share-btn-facebook"
            onClick={() => handleShare("facebook")}
          />
          <Button
            id="refer-btn"
            type="button"
            variant="secondary"
            onClick={openRefer}
            className="px-3 py-2"
          >
            Refer a Friend
          </Button>
        </div>
        <Button variant="canai" type="submit" className="mt-2 w-fit">
          Submit
        </Button>
      </form>
      {referModalOpen && (
        <div className="fixed inset-0 bg-[#07152aa6] z-50 flex items-center justify-center" aria-modal="true">
          <div className="bg-[#163065] p-6 rounded-2xl shadow-2xl flex flex-col items-center w-[90vw] max-w-md gap-4">
            <h2 className="font-bold text-xl mb-2 text-canai-cyan">Refer & Earn</h2>
            <form onSubmit={handleRefer} className="w-full flex flex-col gap-2">
              <label htmlFor="refer-email" className="text-sm font-medium text-canai-cyan">Your Email</label>
              <Input
                id="refer-email"
                type="email"
                placeholder="friends@email.com"
                value={email}
                onChange={e => setEmail(e.target.value)}
                required
                className="bg-[#22467a29]"
              />
              <Button variant="canai" className="mt-2" type="submit">
                Generate Unique Link
              </Button>
            </form>
            <Button variant="ghost" onClick={() => setReferModalOpen(false)}>Close</Button>
          </div>
        </div>
      )}
      <div className="flex justify-end">
        <Button variant="ghost" size="sm" onClick={() => setShowPurge(v => !v)}>
          {showPurge ? "Hide Purge" : "Purge my data"}
        </Button>
      </div>
      {showPurge && (
        <div className="p-3 rounded bg-[#ffcbcb22] border border-red-200 text-red-700 flex items-center gap-2 mt-1 mb-1">
          <span className="font-medium">Danger:</span>
          <Button variant="destructive" size="sm" onClick={handlePurge}>
            Confirm Data Purge
          </Button>
        </div>
      )}
      {/* Followup (simulated) */}
      {showFollowup && (
        <div className="bg-[#112542F5] p-4 mt-5 rounded-xl shadow" aria-live="polite">
          <div id="followup-text" className="font-semibold text-canai-cyan mb-2">
            Thank you for your feedback 🙏
          </div>
          <div id="tips-text" className="text-canai-light mb-1">
            Top tip: Share your SparkSplit with another founder for extra rewards!
          </div>
          <Button
            variant="canai"
            className="mb-2"
            onClick={() => {
              posthog.capture("upsell_clicked", { prompt_id });
              navigate("/social-email");
            }}
          >
            Try Our Social & Email Plan
          </Button>
          {rating < 3 && (
            <div id="poor-followup" className="text-sm text-red-300 mt-2">
              Sorry your SparkSplit didn't land! We'll reach out to make it right.
            </div>
          )}
        </div>
      )}
    </main>
  );
};

export default FeedbackPage;
